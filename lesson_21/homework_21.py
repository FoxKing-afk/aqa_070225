from sqlalchemy import Column, Integer, String, ForeignKey, create_engine, Table
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
import random

Base = declarative_base()
engine = create_engine("sqlite:///students.db", echo=False)
Session = sessionmaker(bind=engine)
session = Session()

# –¢–∞–±–ª–∏—Ü—è –¥–ª—è –∑–≤‚Äô—è–∑–∫—É "–±–∞–≥–∞—Ç–æ –¥–æ –±–∞–≥–∞—Ç—å–æ—Ö"
student_course = Table(
    'student_course', Base.metadata,
    Column('student_id', ForeignKey('students.id'), primary_key=True),
    Column('course_id', ForeignKey('courses.id'), primary_key=True)
)

class Student(Base):
    __tablename__ = 'students'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    courses = relationship("Course", secondary=student_course, back_populates="students")

    def __repr__(self):
        return f"<Student(name={self.name})>"

class Course(Base):
    __tablename__ = 'courses'
    id = Column(Integer, primary_key=True)
    title = Column(String)
    students = relationship("Student", secondary=student_course, back_populates="courses")

    def __repr__(self):
        return f"<Course(title={self.title})>"

Base.metadata.create_all(engine)

# üìå –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—ñ –∫—É—Ä—Å–∏ —ñ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
def seed_data():
    course_titles = ["Math", "History", "Biology", "Physics", "Art"]
    courses = [Course(title=title) for title in course_titles]
    session.add_all(courses)

    student_names = [f"Student{i}" for i in range(1, 21)]
    students = [Student(name=name) for name in student_names]

    for student in students:
        student.courses = random.sample(courses, random.randint(1, 3))
        session.add(student)

    session.commit()
    print("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")

# ‚ûï –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —ñ –∑–∞–ø–∏—Å—É—î–º–æ –π–æ–≥–æ –Ω–∞ –∫—É—Ä—Å
def add_student_to_course(student_name, course_title):
    course = session.query(Course).filter_by(title=course_title).first()
    if not course:
        print("–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò¢")
        return
    student = Student(name=student_name)
    student.courses.append(course)
    session.add(student)
    session.commit()
    print(f"{student_name} –¥–æ–¥–∞–Ω–∏–π –Ω–∞ –∫—É—Ä—Å {course_title}!")

# üîç –í–∏–≤–æ–¥–∏–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∫—É—Ä—Å
def get_students_by_course(course_title):
    course = session.query(Course).filter_by(title=course_title).first()
    if course:
        print(f"–°—Ç—É–¥–µ–Ω—Ç–∏ –Ω–∞ –∫—É—Ä—Å—ñ {course_title}:")
        for s in course.students:
            print(f"- {s.name}")
    else:
        print("–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# üîç –í–∏–≤–æ–¥–∏–º–æ –∫—É—Ä—Å–∏, –Ω–∞ —è–∫—ñ –∑–∞–ø–∏—Å–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç
def get_courses_by_student(student_name):
    student = session.query(Student).filter_by(name=student_name).first()
    if student:
        print(f"{student.name} –∑–∞–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∫—É—Ä—Å–∏:")
        for c in student.courses:
            print(f"- {c.title}")
    else:
        print("–°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# ‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞
def update_student_name(student_id, new_name):
    student = session.query(Student).get(student_id)
    if student:
        old_name = student.name
        student.name = new_name
        session.commit()
        print(f"{old_name} —Ç–µ–ø–µ—Ä {new_name}")
    else:
        print("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")

# ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞
def delete_student(student_id):
    student = session.query(Student).get(student_id)
    if student:
        session.delete(student)
        session.commit()
        print(f"–°—Ç—É–¥–µ–Ω—Ç {student.name} –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
    else:
        print("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")

# üß™ –ü—Ä–æ—Å—Ç—ñ —Ç–µ—Å—Ç–∏
if __name__ == "__main__":
    # seed_data()  # –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö
    add_student_to_course("Katya", "Art")
    get_students_by_course("Art")
    get_courses_by_student("Katya")
    update_student_name(1, "Andriy")
    delete_student(2)